
package com.main.server.implementation;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import com.main.server.service.HistoryDTArray;
import com.main.server.service.MapWrapper;
import com.main.server.service.ObjectFactory;
import com.main.server.service.PlaylistDT;
import com.main.server.service.UserDT;
import com.main.server.service.Users;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "UserWebService", targetNamespace = "http://service.server.main.com/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UserWebService {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws EntityNotFoundException
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/verifyPasswordRequest", output = "http://service.server.main.com/UserWebService/verifyPasswordResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/verifyPassword/Fault/EntityNotFoundException")
    })
    public boolean verifyPassword(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EntityNotFoundException
     */
    @WebMethod
    @Action(input = "http://service.server.main.com/UserWebService/unfollowUserRequest", output = "http://service.server.main.com/UserWebService/unfollowUserResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/unfollowUser/Fault/EntityNotFoundException")
    })
    public void unfollowUser(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/setPasswordRequest", output = "http://service.server.main.com/UserWebService/setPasswordResponse")
    public boolean setPassword(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EntityNotFoundException
     */
    @WebMethod
    @Action(input = "http://service.server.main.com/UserWebService/addNewVisitRequest", output = "http://service.server.main.com/UserWebService/addNewVisitResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/addNewVisit/Fault/EntityNotFoundException")
    })
    public void addNewVisit(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        long arg1)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns com.main.server.service.UserDT
     * @throws EntityNotFoundException
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/getUserDataRequest", output = "http://service.server.main.com/UserWebService/getUserDataResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/getUserData/Fault/EntityNotFoundException")
    })
    public UserDT getUserData(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns com.main.server.service.MapWrapper
     * @throws EntityNotFoundException
     * @throws IOException
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/getAvatarDataRequest", output = "http://service.server.main.com/UserWebService/getAvatarDataResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/getAvatarData/Fault/EntityNotFoundException"),
        @FaultAction(className = IOException.class, value = "http://service.server.main.com/UserWebService/getAvatarData/Fault/IOException")
    })
    public MapWrapper getAvatarData(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EntityNotFoundException, IOException
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EntityNotFoundException
     */
    @WebMethod
    @Action(input = "http://service.server.main.com/UserWebService/createFollowRelationshipRequest", output = "http://service.server.main.com/UserWebService/createFollowRelationshipResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/createFollowRelationship/Fault/EntityNotFoundException")
    })
    public void createFollowRelationship(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @return
     *     returns com.main.server.service.MapWrapper
     * @throws IOException
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/getDefAvatarDataRequest", output = "http://service.server.main.com/UserWebService/getDefAvatarDataResponse", fault = {
        @FaultAction(className = IOException.class, value = "http://service.server.main.com/UserWebService/getDefAvatarData/Fault/IOException")
    })
    public MapWrapper getDefAvatarData()
        throws IOException
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @param arg8
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/createUserRequest", output = "http://service.server.main.com/UserWebService/createUserResponse")
    public boolean createUser(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        byte[] arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7,
        @WebParam(name = "arg8", partName = "arg8")
        boolean arg8);

    /**
     * 
     * @param arg0
     * @throws EntityNotFoundException
     */
    @WebMethod
    @Action(input = "http://service.server.main.com/UserWebService/modifyUserRequest", output = "http://service.server.main.com/UserWebService/modifyUserResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/modifyUser/Fault/EntityNotFoundException")
    })
    public void modifyUser(
        @WebParam(name = "arg0", partName = "arg0")
        UserDT arg0)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EntityNotFoundException
     */
    @WebMethod
    @Action(input = "http://service.server.main.com/UserWebService/setCategoryToChannelRequest", output = "http://service.server.main.com/UserWebService/setCategoryToChannelResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/setCategoryToChannel/Fault/EntityNotFoundException")
    })
    public void setCategoryToChannel(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns com.main.server.service.PlaylistDT
     * @throws EntityNotFoundException
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/findPlaylistByIdRequest", output = "http://service.server.main.com/UserWebService/findPlaylistByIdResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/findPlaylistById/Fault/EntityNotFoundException")
    })
    public PlaylistDT findPlaylistById(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        long arg1)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns com.main.server.service.HistoryDTArray
     * @throws EntityNotFoundException
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/getUserHistoryRequest", output = "http://service.server.main.com/UserWebService/getUserHistoryResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/getUserHistory/Fault/EntityNotFoundException")
    })
    public HistoryDTArray getUserHistory(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @param arg0
     * @throws EntityNotFoundException
     */
    @WebMethod
    @Action(input = "http://service.server.main.com/UserWebService/deleteUserRequest", output = "http://service.server.main.com/UserWebService/deleteUserResponse", fault = {
        @FaultAction(className = EntityNotFoundException.class, value = "http://service.server.main.com/UserWebService/deleteUser/Fault/EntityNotFoundException")
    })
    public void deleteUser(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EntityNotFoundException
    ;

    /**
     * 
     * @return
     *     returns com.main.server.service.Users
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.server.main.com/UserWebService/listUsersRequest", output = "http://service.server.main.com/UserWebService/listUsersResponse")
    public Users listUsers();

}
